{"id":"../node_modules/amis/lib/compat.js","dependencies":[{"name":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js.map","includedInParent":true,"mtime":1606632442000},{"name":"/Users/hcltmac/Desktop/amis-editor/package.json","includedInParent":true,"mtime":1607395305037},{"name":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/package.json","includedInParent":true,"mtime":1606632442000},{"name":"tslib","loc":{"line":3,"column":22},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/tslib/tslib.es6.js"},{"name":"./factory","loc":{"line":4,"column":24},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/factory.js"},{"name":"./renderers/Form/Checkbox","loc":{"line":5,"column":25},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/renderers/Form/Checkbox.js"},{"name":"./renderers/Form/index","loc":{"line":6,"column":22},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/renderers/Form/index.js"},{"name":"./renderers/Form/FieldSet","loc":{"line":7,"column":25},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/renderers/Form/FieldSet.js"},{"name":"./renderers/Form/Tabs","loc":{"line":8,"column":21},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/renderers/Form/Tabs.js"},{"name":"./renderers/Card","loc":{"line":9,"column":21},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/renderers/Card.js"},{"name":"./renderers/List","loc":{"line":10,"column":21},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/renderers/List.js"},{"name":"./renderers/Form/ButtonGroup","loc":{"line":11,"column":28},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/renderers/Form/ButtonGroup.js"},{"name":"./utils/helper","loc":{"line":12,"column":23},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/utils/helper.js"},{"name":"./renderers/Form/Service","loc":{"line":13,"column":24},"parent":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/compat.js","resolved":"/Users/hcltmac/Desktop/amis-editor/node_modules/amis/lib/renderers/Form/Service.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar factory_1 = require(\"./factory\");\nvar Checkbox_1 = require(\"./renderers/Form/Checkbox\");\nvar index_1 = require(\"./renderers/Form/index\");\nvar FieldSet_1 = require(\"./renderers/Form/FieldSet\");\nvar Tabs_1 = require(\"./renderers/Form/Tabs\");\nvar Card_1 = require(\"./renderers/Card\");\nvar List_1 = require(\"./renderers/List\");\nvar ButtonGroup_1 = require(\"./renderers/Form/ButtonGroup\");\nvar helper_1 = require(\"./utils/helper\");\nvar Service_1 = require(\"./renderers/Form/Service\");\n// 兼容老的用法，老用法 label 用在 checkbox 的右侧内容，新用法用 option 来代替。\nfactory_1.addSchemaFilter(function CheckboxPropsFilter(schema, renderer) {\n    if (renderer.component !== Checkbox_1.CheckboxControlRenderer) {\n        return schema;\n    }\n    if (schema.label && typeof schema.option === 'undefined') {\n        schema = tslib_1.__assign({}, schema);\n        schema.option = schema.label;\n        delete schema.label;\n    }\n    return schema;\n});\nfunction convertFieldSetTabs2Controls(schema) {\n    var toUpdate = {};\n    var flag = false;\n    toUpdate.controls = Array.isArray(schema.controls)\n        ? schema.controls.concat()\n        : [];\n    toUpdate.controls = toUpdate.controls.map(function (control) {\n        if (Array.isArray(control)) {\n            var converted = convertFieldSetTabs2Controls({\n                type: 'group',\n                controls: control\n            });\n            if (converted !== control) {\n                flag = true;\n            }\n            return converted;\n        }\n        return control;\n    });\n    schema.fieldSet &&\n        (Array.isArray(schema.fieldSet)\n            ? schema.fieldSet\n            : [schema.fieldSet]).forEach(function (fieldSet) {\n            flag = true;\n            toUpdate.controls.push(tslib_1.__assign(tslib_1.__assign({}, convertFieldSetTabs2Controls(fieldSet)), { type: 'fieldSet', collapsable: schema.collapsable }));\n        });\n    schema.tabs &&\n        (flag = true) &&\n        toUpdate.controls.push({\n            type: 'tabs',\n            tabs: schema.tabs.map(function (tab) { return convertFieldSetTabs2Controls(tab); })\n        });\n    if (flag) {\n        schema = tslib_1.__assign(tslib_1.__assign({}, schema), toUpdate);\n        delete schema.fieldSet;\n        delete schema.tabs;\n    }\n    return schema;\n}\n// Form 中，把 fieldSet 和 tabs 转成 {type: 'fieldSet', controls: []}\n// 同时把数组用法转成 {type: 'group', controls: []}\nfactory_1.addSchemaFilter(function FormPropsFilter(schema, renderer) {\n    if (renderer.component !== index_1.FormRenderer) {\n        return schema;\n    }\n    if (schema.fieldSet || schema.tabs) {\n        // console.warn('Form 下面直接用 fieldSet 或者 tabs 将不支持，请改成在 controls 数组中添加。');\n        schema = convertFieldSetTabs2Controls(schema);\n    }\n    else if (Array.isArray(schema.controls)) {\n        var flag_1 = false;\n        var converted = schema.controls.map(function (control) {\n            if (Array.isArray(control)) {\n                var converted_1 = convertFieldSetTabs2Controls({\n                    type: 'group',\n                    controls: control\n                });\n                if (converted_1 !== control) {\n                    flag_1 = true;\n                }\n                return converted_1;\n            }\n            return control;\n        });\n        if (flag_1) {\n            schema = tslib_1.__assign(tslib_1.__assign({}, schema), { controls: converted });\n        }\n    }\n    return schema;\n});\n// FieldSet 中把 controls 里面的数组用法转成 {type: 'group', controls: []}\nfactory_1.addSchemaFilter(function FormPropsFilter(schema, renderer) {\n    if (renderer.component !== FieldSet_1.FieldSetRenderer) {\n        return schema;\n    }\n    if (Array.isArray(schema.controls)) {\n        var flag_2 = false;\n        var converted = schema.controls.map(function (control) {\n            if (Array.isArray(control)) {\n                var converted_2 = convertFieldSetTabs2Controls({\n                    type: 'group',\n                    controls: control\n                });\n                if (converted_2 !== control) {\n                    flag_2 = true;\n                }\n                return converted_2;\n            }\n            return control;\n        });\n        if (flag_2) {\n            schema = tslib_1.__assign(tslib_1.__assign({}, schema), { controls: converted });\n        }\n    }\n    return schema;\n});\n// Form 里面的 Tabs 中把 controls 里面的数组用法转成 {type: 'group', controls: []}\nfactory_1.addSchemaFilter(function FormPropsFilter(schema, renderer) {\n    if (renderer.component !== Tabs_1.TabsRenderer) {\n        return schema;\n    }\n    if (Array.isArray(schema.tabs)) {\n        var flag_3 = false;\n        var converted = schema.tabs.map(function (tab) {\n            var flag2 = false;\n            var converted = (tab.controls || []).map(function (control) {\n                if (Array.isArray(control)) {\n                    var converted_3 = convertFieldSetTabs2Controls({\n                        type: 'group',\n                        controls: control\n                    });\n                    if (converted_3 !== control) {\n                        flag2 = true;\n                    }\n                    return converted_3;\n                }\n                return control;\n            });\n            if (flag2) {\n                flag_3 = true;\n                tab = tslib_1.__assign(tslib_1.__assign({}, tab), { controls: converted });\n            }\n            return tab;\n        });\n        if (flag_3) {\n            schema = tslib_1.__assign(tslib_1.__assign({}, schema), { tabs: converted });\n        }\n    }\n    return schema;\n});\nfunction convertArray2Hbox(arr) {\n    var flag = false;\n    var converted = arr.map(function (item) {\n        if (Array.isArray(item)) {\n            flag = true;\n            return convertArray2Hbox(item);\n        }\n        return item;\n    });\n    if (!flag) {\n        converted = arr;\n    }\n    return {\n        type: 'hbox',\n        columns: converted\n    };\n}\n// CRUD/List  和 CRUD/Card 的 body 中的数组用法转成 hbox\nfactory_1.addSchemaFilter(function (schema, renderer) {\n    if (renderer.component !== Card_1.CardRenderer &&\n        renderer.component !== List_1.ListItemRenderer) {\n        return schema;\n    }\n    if (Array.isArray(schema.body)) {\n        var flag_4 = false;\n        var converted = schema.body.map(function (item) {\n            if (Array.isArray(item)) {\n                flag_4 = true;\n                return convertArray2Hbox(item);\n            }\n            return item;\n        });\n        if (flag_4) {\n            schema = tslib_1.__assign(tslib_1.__assign({}, schema), { body: converted });\n        }\n    }\n    return schema;\n});\n// button group 的 btnClassName 和 btnActiveClassName 改成 btnLevel 和 btnActiveLevel 了\nfactory_1.addSchemaFilter(function (scheam, renderer) {\n    if (renderer.component !== ButtonGroup_1.ButtonGroupControlRenderer) {\n        return scheam;\n    }\n    if (scheam.btnClassName || scheam.btnActiveClassName) {\n        scheam = tslib_1.__assign(tslib_1.__assign({}, scheam), { btnLevel: helper_1.getLevelFromClassName(scheam.btnClassName), btnActiveLevel: helper_1.getLevelFromClassName(scheam.btnActiveClassName) });\n        delete scheam.btnClassName;\n        delete scheam.btnActiveClassName;\n    }\n    return scheam;\n});\n// FieldSet  className 定制样式方式改成 size 来配置\nfactory_1.addSchemaFilter(function (scheam, renderer) {\n    if (renderer.component !== FieldSet_1.FieldSetRenderer) {\n        return scheam;\n    }\n    if (scheam.className &&\n        !scheam.size &&\n        /\\bfieldset(?:\\-(xs|sm|md|lg))?\\b/.test(scheam.className)) {\n        scheam = tslib_1.__assign(tslib_1.__assign({}, scheam), { size: RegExp.$1 || 'base', className: scheam.className.replace(/\\bfieldset(?:\\-(xs|sm|md|lg))?\\b/, '') });\n        delete scheam.btnClassName;\n        delete scheam.btnActiveClassName;\n    }\n    return scheam;\n});\n// FieldSet  className 定制样式方式改成 size 来配置\nfactory_1.addSchemaFilter(function (scheam, renderer) {\n    if (renderer.component !== Service_1.ServiceRenderer) {\n        return scheam;\n    }\n    if (scheam.body && scheam.body.controls) {\n        scheam = tslib_1.__assign(tslib_1.__assign({}, scheam), { controls: scheam.body.controls });\n        delete scheam.body;\n    }\n    return scheam;\n});\n\n"},"sourceMaps":{"js":{"version":3,"file":"compat.js","sourceRoot":"","sources":["/src/compat.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @file 兼容配置，对于一些老的 api 设计的得不合理的地方做一些适配。\n * @author fex\n */\nimport {SchemaNode, Schema} from './types';\nimport {RendererProps, RendererConfig, addSchemaFilter} from './factory';\nimport {CheckboxControlRenderer} from './renderers/Form/Checkbox';\nimport {FormRenderer} from './renderers/Form/index';\nimport {FieldSetRenderer} from './renderers/Form/FieldSet';\nimport {TabsRenderer} from './renderers/Form/Tabs';\nimport {CardRenderer} from './renderers/Card';\nimport {ListItemRenderer} from './renderers/List';\nimport {ButtonGroupControlRenderer} from './renderers/Form/ButtonGroup';\nimport {getLevelFromClassName} from './utils/helper';\nimport {ServiceRenderer} from './renderers/Form/Service';\n\n// 兼容老的用法，老用法 label 用在 checkbox 的右侧内容，新用法用 option 来代替。\naddSchemaFilter(function CheckboxPropsFilter(schema: Schema, renderer) {\n  if (renderer.component !== CheckboxControlRenderer) {\n    return schema;\n  }\n\n  if (schema.label && typeof schema.option === 'undefined') {\n    schema = {\n      ...schema\n    };\n    schema.option = schema.label;\n    delete schema.label;\n  }\n\n  return schema;\n});\n\nfunction convertFieldSetTabs2Controls(schema: any) {\n  const toUpdate: any = {};\n  let flag = false;\n\n  toUpdate.controls = Array.isArray(schema.controls)\n    ? schema.controls.concat()\n    : [];\n  toUpdate.controls = toUpdate.controls.map((control: any) => {\n    if (Array.isArray(control)) {\n      let converted = convertFieldSetTabs2Controls({\n        type: 'group',\n        controls: control\n      });\n\n      if (converted !== control) {\n        flag = true;\n      }\n\n      return converted;\n    }\n    return control;\n  });\n\n  schema.fieldSet &&\n    (Array.isArray(schema.fieldSet)\n      ? schema.fieldSet\n      : [schema.fieldSet]\n    ).forEach((fieldSet: any) => {\n      flag = true;\n      toUpdate.controls.push({\n        ...convertFieldSetTabs2Controls(fieldSet),\n        type: 'fieldSet',\n        collapsable: schema.collapsable\n      });\n    });\n\n  schema.tabs &&\n    (flag = true) &&\n    toUpdate.controls.push({\n      type: 'tabs',\n      tabs: schema.tabs.map((tab: any) => convertFieldSetTabs2Controls(tab))\n    });\n\n  if (flag) {\n    schema = {\n      ...schema,\n      ...toUpdate\n    };\n    delete schema.fieldSet;\n    delete schema.tabs;\n  }\n  return schema;\n}\n\n// Form 中，把 fieldSet 和 tabs 转成 {type: 'fieldSet', controls: []}\n// 同时把数组用法转成 {type: 'group', controls: []}\naddSchemaFilter(function FormPropsFilter(schema: Schema, renderer) {\n  if (renderer.component !== FormRenderer) {\n    return schema;\n  }\n\n  if (schema.fieldSet || schema.tabs) {\n    // console.warn('Form 下面直接用 fieldSet 或者 tabs 将不支持，请改成在 controls 数组中添加。');\n    schema = convertFieldSetTabs2Controls(schema);\n  } else if (Array.isArray(schema.controls)) {\n    let flag = false;\n    let converted = schema.controls.map((control: any) => {\n      if (Array.isArray(control)) {\n        let converted = convertFieldSetTabs2Controls({\n          type: 'group',\n          controls: control\n        });\n\n        if (converted !== control) {\n          flag = true;\n        }\n        return converted;\n      }\n      return control;\n    });\n\n    if (flag) {\n      schema = {\n        ...schema,\n        controls: converted\n      };\n    }\n  }\n\n  return schema;\n});\n\n// FieldSet 中把 controls 里面的数组用法转成 {type: 'group', controls: []}\naddSchemaFilter(function FormPropsFilter(schema: Schema, renderer) {\n  if (renderer.component !== FieldSetRenderer) {\n    return schema;\n  }\n\n  if (Array.isArray(schema.controls)) {\n    let flag = false;\n    let converted = schema.controls.map((control: any) => {\n      if (Array.isArray(control)) {\n        let converted = convertFieldSetTabs2Controls({\n          type: 'group',\n          controls: control\n        });\n\n        if (converted !== control) {\n          flag = true;\n        }\n        return converted;\n      }\n      return control;\n    });\n\n    if (flag) {\n      schema = {\n        ...schema,\n        controls: converted\n      };\n    }\n  }\n\n  return schema;\n});\n\n// Form 里面的 Tabs 中把 controls 里面的数组用法转成 {type: 'group', controls: []}\naddSchemaFilter(function FormPropsFilter(schema: Schema, renderer) {\n  if (renderer.component !== TabsRenderer) {\n    return schema;\n  }\n\n  if (Array.isArray(schema.tabs)) {\n    let flag = false;\n    let converted = schema.tabs.map((tab: any) => {\n      let flag2 = false;\n      let converted = (tab.controls || []).map((control: any) => {\n        if (Array.isArray(control)) {\n          let converted = convertFieldSetTabs2Controls({\n            type: 'group',\n            controls: control\n          });\n\n          if (converted !== control) {\n            flag2 = true;\n          }\n          return converted;\n        }\n        return control;\n      });\n\n      if (flag2) {\n        flag = true;\n        tab = {\n          ...tab,\n          controls: converted\n        };\n      }\n\n      return tab;\n    });\n\n    if (flag) {\n      schema = {\n        ...schema,\n        tabs: converted\n      };\n    }\n  }\n\n  return schema;\n});\n\nfunction convertArray2Hbox(arr: Array<any>): any {\n  let flag = false;\n  let converted = arr.map((item: any) => {\n    if (Array.isArray(item)) {\n      flag = true;\n      return convertArray2Hbox(item);\n    }\n\n    return item;\n  });\n  if (!flag) {\n    converted = arr;\n  }\n\n  return {\n    type: 'hbox',\n    columns: converted\n  };\n}\n\n// CRUD/List  和 CRUD/Card 的 body 中的数组用法转成 hbox\naddSchemaFilter(function (schema: Schema, renderer) {\n  if (\n    renderer.component !== CardRenderer &&\n    renderer.component !== ListItemRenderer\n  ) {\n    return schema;\n  }\n\n  if (Array.isArray(schema.body)) {\n    let flag = false;\n    let converted = schema.body.map((item: any) => {\n      if (Array.isArray(item)) {\n        flag = true;\n        return convertArray2Hbox(item);\n      }\n      return item;\n    });\n\n    if (flag) {\n      schema = {\n        ...schema,\n        body: converted\n      };\n    }\n  }\n\n  return schema;\n});\n\n// button group 的 btnClassName 和 btnActiveClassName 改成 btnLevel 和 btnActiveLevel 了\naddSchemaFilter(function (scheam: Schema, renderer) {\n  if (renderer.component !== ButtonGroupControlRenderer) {\n    return scheam;\n  }\n\n  if (scheam.btnClassName || scheam.btnActiveClassName) {\n    scheam = {\n      ...scheam,\n      btnLevel: getLevelFromClassName(scheam.btnClassName),\n      btnActiveLevel: getLevelFromClassName(scheam.btnActiveClassName)\n    };\n\n    delete scheam.btnClassName;\n    delete scheam.btnActiveClassName;\n  }\n\n  return scheam;\n});\n\n// FieldSet  className 定制样式方式改成 size 来配置\naddSchemaFilter(function (scheam: Schema, renderer) {\n  if (renderer.component !== FieldSetRenderer) {\n    return scheam;\n  }\n\n  if (\n    scheam.className &&\n    !scheam.size &&\n    /\\bfieldset(?:\\-(xs|sm|md|lg))?\\b/.test(scheam.className)\n  ) {\n    scheam = {\n      ...scheam,\n      size: RegExp.$1 || 'base',\n      className: scheam.className.replace(\n        /\\bfieldset(?:\\-(xs|sm|md|lg))?\\b/,\n        ''\n      )\n    };\n\n    delete scheam.btnClassName;\n    delete scheam.btnActiveClassName;\n  }\n\n  return scheam;\n});\n\n// FieldSet  className 定制样式方式改成 size 来配置\naddSchemaFilter(function (scheam: Schema, renderer) {\n  if (renderer.component !== ServiceRenderer) {\n    return scheam;\n  }\n\n  if (scheam.body && scheam.body.controls) {\n    scheam = {\n      ...scheam,\n      controls: scheam.body.controls\n    };\n    delete scheam.body;\n  }\n\n  return scheam;\n});\n"]}},"error":null,"hash":"8ac057416909ba970a9fa3eb8b06170e","cacheData":{"env":{}}}