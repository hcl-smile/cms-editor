{"id":"../node_modules/amis/lib/components/condition-builder/Expression.js","dependencies":[{"name":"/usr/local/work/amis-editor/package.json","includedInParent":true,"mtime":1607074594934},{"name":"/usr/local/work/amis-editor/node_modules/amis/package.json","includedInParent":true,"mtime":1606632442645},{"name":"tslib","loc":{"line":4,"column":22},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/tslib/tslib.es6.js"},{"name":"react","loc":{"line":5,"column":46},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/react/index.js"},{"name":"./Field","loc":{"line":6,"column":46},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Field.js"},{"name":"../../utils/helper","loc":{"line":7,"column":23},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/amis/lib/utils/helper.js"},{"name":"./Value","loc":{"line":8,"column":46},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Value.js"},{"name":"./InputSwitch","loc":{"line":9,"column":52},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/InputSwitch.js"},{"name":"./Func","loc":{"line":10,"column":45},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Func.js"},{"name":"../../theme","loc":{"line":11,"column":22},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/amis/lib/theme.js"},{"name":"./Formula","loc":{"line":12,"column":48},"parent":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Expression.js","resolved":"/usr/local/work/amis-editor/node_modules/amis/lib/components/condition-builder/Formula.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Expression = void 0;\nvar tslib_1 = require(\"tslib\");\nvar react_1 = tslib_1.__importDefault(require(\"react\"));\nvar Field_1 = tslib_1.__importDefault(require(\"./Field\"));\nvar helper_1 = require(\"../../utils/helper\");\nvar Value_1 = tslib_1.__importDefault(require(\"./Value\"));\nvar InputSwitch_1 = tslib_1.__importDefault(require(\"./InputSwitch\"));\nvar Func_1 = tslib_1.__importDefault(require(\"./Func\"));\nvar theme_1 = require(\"../../theme\");\nvar Formula_1 = tslib_1.__importDefault(require(\"./Formula\"));\nvar fieldMap = {\n    value: '值',\n    field: '字段',\n    func: '函数',\n    formula: '公式'\n};\nvar Expression = /** @class */ (function (_super) {\n    tslib_1.__extends(Expression, _super);\n    function Expression() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Expression.prototype.handleInputTypeChange = function (type) {\n        var _a;\n        var value = this.props.value;\n        var onChange = this.props.onChange;\n        if (type === 'value') {\n            value = '';\n        }\n        else if (type === 'func') {\n            value = {\n                type: 'func',\n                func: (_a = helper_1.findTree(this.props.funcs, function (item) { return item.type; })) === null || _a === void 0 ? void 0 : _a.type,\n                args: []\n            };\n        }\n        else if (type === 'field') {\n            value = {\n                type: 'field',\n                field: ''\n            };\n        }\n        else if (type === 'formula') {\n            value = {\n                type: 'formula',\n                value: ''\n            };\n        }\n        onChange(value, this.props.index);\n    };\n    Expression.prototype.handleValueChange = function (data) {\n        this.props.onChange(data, this.props.index);\n    };\n    Expression.prototype.handleFieldChange = function (field) {\n        var value = this.props.value;\n        var onChange = this.props.onChange;\n        value = {\n            type: 'field',\n            field: field\n        };\n        onChange(value, this.props.index);\n    };\n    Expression.prototype.handleFuncChange = function (func) {\n        var value = this.props.value;\n        var onChange = this.props.onChange;\n        value = tslib_1.__assign(tslib_1.__assign({}, func), { type: 'func' });\n        onChange(value, this.props.index);\n    };\n    Expression.prototype.handleFormulaChange = function (formula) {\n        var value = this.props.value;\n        var onChange = this.props.onChange;\n        value = {\n            type: 'formula',\n            value: formula\n        };\n        onChange(value, this.props.index);\n    };\n    Expression.prototype.render = function () {\n        var _a, _b, _c, _d, _e;\n        var _f = this.props, value = _f.value, valueField = _f.valueField, allowedTypes = _f.allowedTypes, funcs = _f.funcs, fields = _f.fields, op = _f.op, cx = _f.classnames, config = _f.config;\n        var inputType = (((_a = value) === null || _a === void 0 ? void 0 : _a.type) === 'field'\n            ? 'field'\n            : ((_b = value) === null || _b === void 0 ? void 0 : _b.type) === 'func'\n                ? 'func'\n                : ((_c = value) === null || _c === void 0 ? void 0 : _c.type) === 'formula'\n                    ? 'formula'\n                    : value !== undefined\n                        ? 'value'\n                        : undefined) || (allowedTypes === null || allowedTypes === void 0 ? void 0 : allowedTypes[0]) ||\n            'value';\n        var types = allowedTypes || ['value', 'field', 'func'];\n        if ((!Array.isArray(funcs) || !funcs.length) && ~types.indexOf('func')) {\n            types.splice(types.indexOf('func'), 1);\n        }\n        return (react_1.default.createElement(react_1.default.Fragment, null,\n            inputType === 'value' ? (react_1.default.createElement(Value_1.default, { field: valueField, value: value, onChange: this.handleValueChange, op: op })) : null,\n            inputType === 'field' ? (react_1.default.createElement(Field_1.default, { value: (_d = value) === null || _d === void 0 ? void 0 : _d.field, onChange: this.handleFieldChange, options: valueField\n                    ? helper_1.filterTree(fields, function (item) {\n                        return item.children ||\n                            item.type === valueField.type;\n                    })\n                    : fields })) : null,\n            inputType === 'func' ? (react_1.default.createElement(Func_1.default, { config: config, value: value, onChange: this.handleFuncChange, funcs: funcs, fields: fields, allowedTypes: allowedTypes })) : null,\n            inputType === 'formula' ? (react_1.default.createElement(Formula_1.default, { value: (_e = value) === null || _e === void 0 ? void 0 : _e.value, onChange: this.handleFormulaChange })) : null,\n            types.length > 1 ? (react_1.default.createElement(InputSwitch_1.default, { value: inputType, onChange: this.handleInputTypeChange, options: types.map(function (item) { return ({\n                    label: fieldMap[item],\n                    value: item\n                }); }) })) : null));\n    };\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [String]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleInputTypeChange\", null);\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleValueChange\", null);\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [String]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleFieldChange\", null);\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleFuncChange\", null);\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [String]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleFormulaChange\", null);\n    return Expression;\n}(react_1.default.Component));\nexports.Expression = Expression;\nexports.default = theme_1.themeable(Expression);\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../node_modules/amis/lib/components/condition-builder/Expression.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}}],"sources":{"../node_modules/amis/lib/components/condition-builder/Expression.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Expression = void 0;\nvar tslib_1 = require(\"tslib\");\nvar react_1 = tslib_1.__importDefault(require(\"react\"));\nvar Field_1 = tslib_1.__importDefault(require(\"./Field\"));\nvar helper_1 = require(\"../../utils/helper\");\nvar Value_1 = tslib_1.__importDefault(require(\"./Value\"));\nvar InputSwitch_1 = tslib_1.__importDefault(require(\"./InputSwitch\"));\nvar Func_1 = tslib_1.__importDefault(require(\"./Func\"));\nvar theme_1 = require(\"../../theme\");\nvar Formula_1 = tslib_1.__importDefault(require(\"./Formula\"));\nvar fieldMap = {\n    value: '值',\n    field: '字段',\n    func: '函数',\n    formula: '公式'\n};\nvar Expression = /** @class */ (function (_super) {\n    tslib_1.__extends(Expression, _super);\n    function Expression() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Expression.prototype.handleInputTypeChange = function (type) {\n        var _a;\n        var value = this.props.value;\n        var onChange = this.props.onChange;\n        if (type === 'value') {\n            value = '';\n        }\n        else if (type === 'func') {\n            value = {\n                type: 'func',\n                func: (_a = helper_1.findTree(this.props.funcs, function (item) { return item.type; })) === null || _a === void 0 ? void 0 : _a.type,\n                args: []\n            };\n        }\n        else if (type === 'field') {\n            value = {\n                type: 'field',\n                field: ''\n            };\n        }\n        else if (type === 'formula') {\n            value = {\n                type: 'formula',\n                value: ''\n            };\n        }\n        onChange(value, this.props.index);\n    };\n    Expression.prototype.handleValueChange = function (data) {\n        this.props.onChange(data, this.props.index);\n    };\n    Expression.prototype.handleFieldChange = function (field) {\n        var value = this.props.value;\n        var onChange = this.props.onChange;\n        value = {\n            type: 'field',\n            field: field\n        };\n        onChange(value, this.props.index);\n    };\n    Expression.prototype.handleFuncChange = function (func) {\n        var value = this.props.value;\n        var onChange = this.props.onChange;\n        value = tslib_1.__assign(tslib_1.__assign({}, func), { type: 'func' });\n        onChange(value, this.props.index);\n    };\n    Expression.prototype.handleFormulaChange = function (formula) {\n        var value = this.props.value;\n        var onChange = this.props.onChange;\n        value = {\n            type: 'formula',\n            value: formula\n        };\n        onChange(value, this.props.index);\n    };\n    Expression.prototype.render = function () {\n        var _a, _b, _c, _d, _e;\n        var _f = this.props, value = _f.value, valueField = _f.valueField, allowedTypes = _f.allowedTypes, funcs = _f.funcs, fields = _f.fields, op = _f.op, cx = _f.classnames, config = _f.config;\n        var inputType = (((_a = value) === null || _a === void 0 ? void 0 : _a.type) === 'field'\n            ? 'field'\n            : ((_b = value) === null || _b === void 0 ? void 0 : _b.type) === 'func'\n                ? 'func'\n                : ((_c = value) === null || _c === void 0 ? void 0 : _c.type) === 'formula'\n                    ? 'formula'\n                    : value !== undefined\n                        ? 'value'\n                        : undefined) || (allowedTypes === null || allowedTypes === void 0 ? void 0 : allowedTypes[0]) ||\n            'value';\n        var types = allowedTypes || ['value', 'field', 'func'];\n        if ((!Array.isArray(funcs) || !funcs.length) && ~types.indexOf('func')) {\n            types.splice(types.indexOf('func'), 1);\n        }\n        return (react_1.default.createElement(react_1.default.Fragment, null,\n            inputType === 'value' ? (react_1.default.createElement(Value_1.default, { field: valueField, value: value, onChange: this.handleValueChange, op: op })) : null,\n            inputType === 'field' ? (react_1.default.createElement(Field_1.default, { value: (_d = value) === null || _d === void 0 ? void 0 : _d.field, onChange: this.handleFieldChange, options: valueField\n                    ? helper_1.filterTree(fields, function (item) {\n                        return item.children ||\n                            item.type === valueField.type;\n                    })\n                    : fields })) : null,\n            inputType === 'func' ? (react_1.default.createElement(Func_1.default, { config: config, value: value, onChange: this.handleFuncChange, funcs: funcs, fields: fields, allowedTypes: allowedTypes })) : null,\n            inputType === 'formula' ? (react_1.default.createElement(Formula_1.default, { value: (_e = value) === null || _e === void 0 ? void 0 : _e.value, onChange: this.handleFormulaChange })) : null,\n            types.length > 1 ? (react_1.default.createElement(InputSwitch_1.default, { value: inputType, onChange: this.handleInputTypeChange, options: types.map(function (item) { return ({\n                    label: fieldMap[item],\n                    value: item\n                }); }) })) : null));\n    };\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [String]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleInputTypeChange\", null);\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleValueChange\", null);\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [String]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleFieldChange\", null);\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleFuncChange\", null);\n    tslib_1.__decorate([\n        helper_1.autobind,\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [String]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], Expression.prototype, \"handleFormulaChange\", null);\n    return Expression;\n}(react_1.default.Component));\nexports.Expression = Expression;\nexports.default = theme_1.themeable(Expression);\n\n"},"lineCount":146}},"error":null,"hash":"4b8c5fe0101168719e1c0aa263df1d4f","cacheData":{"env":{}}}